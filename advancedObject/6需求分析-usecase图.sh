usecase图的历史与黑盒视角：
        。。。。。。。
        将系统看做一个黑盒 不考虑其怎么实现

        怎么做？
            1 划定系统边界
                系统和用户交互的地方。。。。    了解系统对外界的作用。。。
                了解交互的功能 相当于窗户
参与者的概念：
        识别参与者：
            参与者：
                位于系统之外 但又与系统进行交互
                        交互：  参与者可以发出对系统服务的请求
                                按系统的要求提供服务
        当识别完所有的参与者和系统之间的交互关系的时候 黑盒分析结束了
            一个参与者的一个实例代表以一种特定的方式与系统进行的单独的交互
            硬件与系统交互： 借助很多的接口
            软件与系统佳偶： 借助很多协议 TCP/IP
        参与者之间的泛化关系：
            参与者与参与者之间拥有共同的组成部分时
    识别参与者的策略与技巧：
            1 首先将那个于启动系统行为的参与者
            2 从用户 外部系统和设备三个方面发现参与者
                用户：
                    从直接使用系统的人员中发现参与者    
                        直接使用。。不知间接
                    不要识别特定的人    而是一些角色 集合
                外部系统：
                    所有与系统交互的外部应用系统都是参与者
                        外部应用系统可以是其他子系统、上级系统或任何与
                        它进行协作的系统。
                设备:
                    识别所有与系统交互的设备
                    与系统相连的设备
                    向系统提供外界信息或系统的控制下运行
                    通常,不包括监视器、键盘、鼠标和其它的标准的
                        用户接口类型设备
                    考虑外部传感器(输入信息)和受控马达(输出信息)
                外部事件:   尽可能的不要作为参与者 因为没有交互行为只有发送
                    当我们构造实时和异步交互的系统时,将外部事件识别为
                        潜在的参与者就变得更加重要了。
                    

            3 通过识别一般的或较特殊的较色来组织参与者

                










